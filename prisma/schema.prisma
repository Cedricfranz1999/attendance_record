generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}


model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Students {
    id             Int              @id @default(autoincrement())
    firstname      String
    middleName     String?
    lastName       String
    image          String
    username       String?
    password       String?

    attendanceRecords AttendanceRecord[]
    standbyStudent    StandbyStudents?
}

model StandbyStudents {
    id        Int      @id @default(autoincrement())
    startTime DateTime
    status    String?  @default("PRESENT")

    studentId Int      @unique
    student   Students @relation(fields: [studentId], references: [id], onDelete: Cascade)
}



model Teacher {
    id         Int       @id @default(autoincrement())
    firstname  String
    middleName String?
    lastName   String
    image      String
    username   String?
    password   String?

    subjects   Subject[]
}


model Subject {
    id        Int      @id @default(autoincrement())
    name      String
    startTime DateTime?  
    endTime   DateTime?  
    duration  Int?
    active    Boolean @default(false)
    teacherId Int
    order  Int?  @unique
    teacher   Teacher   @relation(fields: [teacherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    attendanceRecords AttendanceRecord[]
}



model Attendance {
    id        Int      @id @default(autoincrement())
    date      DateTime @unique 
    records   AttendanceRecord[]
}

model AttendanceRecord {
    id           Int       @id @default(autoincrement())
    attendanceId Int
    studentId    Int
    subjectId    Int?     
    status       AttendanceStatus @default(PRESENT)
    timeStart    DateTime?
    timeEnd      DateTime?
    breakTime    Int? @default(600) 
    totalTimeRender  Int ?
    paused       Boolean?  @default(false)
    

    attendance   Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    student      Students   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    subject      Subject?   @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade) 

    @@unique([attendanceId, studentId, subjectId])
}

enum AttendanceStatus {
    PRESENT
    ABSENT
    LATE
    EXCUSED
}
